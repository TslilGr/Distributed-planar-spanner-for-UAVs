[General]
network = Net
tkenv-plugin-path = ../../../etc/plugins
#debug-on-errors = true
#record-eventlog = true
#eventlog-message-detail-pattern = *:(not declaredOn(cMessage) and not declaredOn(cNamedObject) and not declaredOn(cObject))

**.constraintAreaMinX = 0m					# plauground - play field defenitions, should be same as @display("bgb in the .ned Net definition,
**.constraintAreaMinY = 0m					# this is the cubic volume that the node can not leave.
**.constraintAreaMinZ = 0m  


seed-set=64
output-scalar-file = ${resultdir}/${configname}-${iterationvars}-${repetition}.sca
output-vector-file = ${resultdir}/${configname}-${iterationvars}-${repetition}.vec

**.pendingRequest.result-recording-modes = +histogram
**.drone[*].pendingRequest.result-recording-modes = -vector

# SIMULATION STAT
**.constraintAreaMaxX = ${maxOnTheWayDistX = 800}m
**.constraintAreaMaxY = ${maxOnTheWayDistY = 800}m
# ----------------
**.constraintAreaMaxZ = 0m

# nic settings all
**.**.wlan[*].typename = "MYIdealWirelessNic"
**.**.wlan[*].bitrate = 2Mbps
**.**.wlan[*].mac.address = "auto"
**.**.wlan[*].mac.headerLength = 20B

# SIMULATION STAT
*.host[*].wlan[*].radio.transmissionRange = 0m
*.drone[*].wlan[*].radio.transmissionRange = ${transmissionRange = 100}m
*.cc.wlan[*].radio.transmissionRange = 100m
# ----------------

# SIMULATION STAT
**.**.wlan[*].radio.criticalConnectivityStrip = ${isMINcriticalConnectivityStrip2 = 10}m			#critical strip for the connectivity state state
# ----------------

**.drone[*].mobility.maxOnTheWayDistX = ${maxOnTheWayDistX}m										# Needed in mobility in order to calc onTheWaySpeed2
**.drone[*].mobility.maxOnTheWayDistY = ${maxOnTheWayDistY}m
**.drone[*].mobility.transmissionRange = ${transmissionRange}m

*.drone[0].wlan[*].radio.drawCoverage = true
*.drone[*].wlan[*].radio.drawCoverage = false
*.cc.wlan[*].radio.drawCoverage = true

# mobility host
# SIMULATION STAT
**.host*.mobilityType = "MYRandomWPMobility"				
**.host*.mobility.initialX = 100m
**.host*.mobility.initialY = 55m
**.host*.mobility.speed = uniform(3mps,5mps)
**.host*.mobility.waitTime = uniform(5s,8s)						# The time a host waits, after reaching its dst and calculating its new dst
**.host*.mobility.updateInterval = 500ms						# The abstract move method is called autmotically in every updateInterval steps
#**.host*.priority = uniform(0, 10)                                  # priority

# ----------------

**.host*.mobility.initFromDisplayString = false 				# Should the nodes position start from position in .ned design

# mobility cc
**.cc.mobilityType = "MYStationaryMobility"

# mobility drone
**.drone[*].mobilityType = "MYConstSpeedMobilityDrone"

**.drone[*].mobility.criticalConnectivityStrip = ${isMINcriticalConnectivityStrip2}m

# SIMULATION STAT
**.drone[*].mobility.criticalStrip = 10m						# Critical strip for the critical state test where strip define distance from transmissionRange

**.drone[*].mobility.RwhenExDroneOnTheWay = 30m					# R of the area we use to look for criticalcontenor (close to pre host from area calling extra drone for)
																# inorder to save another extra drone call and using the one that on the way already

**.drone[*].mobility.RneighborhelpstripDelta = 30m				# The delta we use to set RneighborHelpStrip = 
																# transmissionRange(currDronesBestNeighborSet.droneHelping) - criticalStrip - RneighborhelpstripDelta, 
																# together CANT BE MORE THEN: transmissionRange(currDronesBestNeighborSet.droneHelping) - criticalStrip  

**.drone[*].mobility.strengthStripDelta = 30m					# Used to set extra strip for when testing linker redundance calculated : 
																# transmissionRange - criticalConnectivityStrip - strengthStripDelta (SUM OF TOTAL MUST BE > 0)
																# basicly this sets the distance between imLinkedBy drone and myRadioRef2.linker

**.drone[*].mobility.ccChoosingMode = 0							# Modes are : 0 - findFARTHESTTransferredCriticalHost, 1 - findRANDOMTransferredCriticalHost, default(0)
																# NOTE: if adding more Modes need to add handle in this case in the switch test in MYConstSpeedMobilityDrone::setTargetPosition()
																  

**.drone[*].mobility.speed = ${speed1 = 120}mps
**.drone[*].mobility.updateInterval = 100ms						# The simulation time interval used to regularly signal mobility state changes and update the display

**.drone[0].mobility.initialX = 100m
**.drone[0].mobility.initialY = 65m
**.drone[0].mobility.initialZ = 0m
# ----------------	

**.drone*.mobility.initialX = 0m								# OFF DRONES initial position
**.drone*.mobility.initialY = 0m
**.drone*.mobility.initialZ = 0m

**.drone*.mobility.initFromDisplayString = false	 			# Should the nodes position start from position in .ned design

 
[Config case1]
description = "Base Network Case"

*.Central_Algorithm_On = true
*.numHosts = 10
*.numDrones = 14
*.K_parameter = 7
*.C_parameter = 4
#*.numNFZ = 1												#***** ADDITION ******

[Config case2] 
description = "Full Network Case"
*.Central_Algorithm_On = true
*.numHosts = 10
*.numDrones = 11
*.K_parameter = 3
*.C_parameter = 4


[Config case3] 
description = "HILA & TSLIL"
*.Central_Algorithm_On = false
*.numHosts = 10
*.numDrones = 15
*.K_parameter = 3
*.C_parameter = 4

*.numNFZ = 4
*.NFZ[0].x = 220
*.NFZ[0].y = 400
*.NFZ[0].radius = 110
*.NFZ[1].x = 500
*.NFZ[1].y = 200
*.NFZ[1].radius = 110
*.NFZ[2].x = 700
*.NFZ[2].y = 350
*.NFZ[2].radius = 100
*.NFZ[3].x = 550
*.NFZ[3].y = 600
*.NFZ[3].radius = 130

#*.host[*].priority =intuniform(1, 11)
*.host[0].priority = 0
*.host[1].priority = 1
*.host[2].priority = 2
*.host[3].priority = 3
*.host[4].priority = 4
*.host[5].priority = 5
*.host[6].priority = 6
*.host[7].priority = 7
*.host[8].priority = 8
*.host[9].priority = 9
*.host[10].priority = 10
*.host[11].priority = 11
*.host[12].priority = 12
*.host[13].priority = 13
*.host[14].priority = 14
*.host[15].priority = 15
*.host[16].priority = 16
*.host[17].priority = 17
*.host[18].priority = 18
*.host[19].priority = 19
*.host[20].priority = 20
*.host[21].priority = 21
*.host[22].priority = 22
*.host[23].priority = 23
*.host[24].priority = 24
*.host[25].priority = 25
*.host[26].priority = 26
*.host[27].priority = 27
*.host[28].priority = 28
*.host[29].priority = 29



